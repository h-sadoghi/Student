Traceback (most recent call last):
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Dr\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from skimage import color, data, img_as_float

# Load and preprocess image
image = img_as_float(data.astronaut())  # Load an example image from skimage
gray_image = color.rgb2gray(image)  # Convert to grayscale
noisy_image = gray_image + 0.1 * np.random.normal(size=gray_image.shape)  # Add noise

# Flatten the image for PCA
image_flat = gray_image.flatten()
noisy_image_flat = noisy_image.flatten()

# Create multiple noisy samples for PCA
n_samples = 10  # Number of samples for PCA
X = np.array([noisy_image_flat] * n_samples)  # Simulate multiple noisy samples
X += 0.01 * np.random.normal(size=X.shape)  # Add slight variation to simulate multiple noisy images

# Center the data
mean = np.mean(X, axis=0)
X_centered = X - mean

# Compute the covariance matrix
cov_matrix = np.cov(X_centered, rowvar=False)

# Eigenvalue decomposition
eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)

# Sort eigenvalues and eigenvectors
sorted_indices = np.argsort(eigenvalues)[::-1]
sorted_eigenvalues = eigenvalues[sorted_indices]
sorted_eigenvectors = eigenvectors[:, sorted_indices]

# Function to reconstruct image with a given number of components
def reconstruct_image(n_components):
    top_eigenvectors = sorted_eigenvectors[:, :n_components]
    X_pca = np.dot(X_centered, top_eigenvectors)
    X_reconstructed = np.dot(X_pca, top_eigenvectors.T)
    
    # Add the mean back to the data
    X_reconstructed += mean
    
    # Reshape the data back to the image shape
    reconstructed_image = X_reconstructed[0].reshape(gray_image.shape)
    
    return reconstructed_image

# Values of n_components to test
n_components_list = [1, 5, 10, 20]

# Plot original, noisy, and denoised images
plt.figure(figsize=(15, 10))

plt.subplot(2, len(n_components_list) + 1, 1)
plt.title('Noisy Image')
plt.imshow(noisy_image, cmap='gray')
plt.axis('off')

for i, n_components in enumerate(n_components_list):
    if n_components > min(X.shape[1], X.shape[0]):
        # Skip invalid n_components
        continue

    denoised_image = reconstruct_image(n_components)
    difference = np.abs(noisy_image - denoised_image)
    
    plt.subplot(2, len(n_components_list) + 1, i + 2)
    plt.title(f'Denoised (n={n_components})')
    plt.imshow(denoised_image, cmap='gray')
    plt.axis('off')
    
    plt.subplot(2, len(n_components_list) + 1, len(n_components_list) + 2 + i)
    plt.title(f'Difference (n={n_components})')
    plt.imshow(difference, cmap='hot')
    plt.axis('off')

plt.tight_layout()
plt.show()

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mMemoryError[0m                               Traceback (most recent call last)
Cell [1;32mIn[4], line 24[0m
[0;32m     21[0m X_centered [38;5;241m=[39m X [38;5;241m-[39m mean
[0;32m     23[0m [38;5;66;03m# Compute the covariance matrix[39;00m
[1;32m---> 24[0m cov_matrix [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mcov[49m[43m([49m[43mX_centered[49m[43m,[49m[43m [49m[43mrowvar[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[0;32m     26[0m [38;5;66;03m# Eigenvalue decomposition[39;00m
[0;32m     27[0m eigenvalues, eigenvectors [38;5;241m=[39m np[38;5;241m.[39mlinalg[38;5;241m.[39meigh(cov_matrix)

File [1;32mE:\MainHomePage\.M_HomePage\Lib\site-packages\numpy\lib\_function_base_impl.py:2772[0m, in [0;36mcov[1;34m(m, y, rowvar, bias, ddof, fweights, aweights, dtype)[0m
[0;32m   2770[0m [38;5;28;01melse[39;00m:
[0;32m   2771[0m     X_T [38;5;241m=[39m (X[38;5;241m*[39mw)[38;5;241m.[39mT
[1;32m-> 2772[0m c [38;5;241m=[39m [43mdot[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43mX_T[49m[38;5;241;43m.[39;49m[43mconj[49m[43m([49m[43m)[49m[43m)[49m
[0;32m   2773[0m c [38;5;241m*[39m[38;5;241m=[39m np[38;5;241m.[39mtrue_divide([38;5;241m1[39m, fact)
[0;32m   2774[0m [38;5;28;01mreturn[39;00m c[38;5;241m.[39msqueeze()

[1;31mMemoryError[0m: Unable to allocate 512. GiB for an array with shape (262144, 262144) and data type float64

